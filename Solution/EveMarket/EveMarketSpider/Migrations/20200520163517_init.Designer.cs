// <auto-generated />
using EveMarketSpider.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EveMarketSpider.Migrations
{
    [DbContext(typeof(EveContext))]
    [Migration("20200520163517_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4");

            modelBuilder.Entity("EveMarketEntities.Attribute", b =>
                {
                    b.Property<int>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("DefaultValue")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Etag")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HighIsGood")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IconId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Stackable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("AttributeId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("EveMarketEntities.Constellation", b =>
                {
                    b.Property<int>("ConstellationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Etag")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("RegionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConstellationId");

                    b.ToTable("Constellations");
                });

            modelBuilder.Entity("EveMarketEntities.Effect", b =>
                {
                    b.Property<int>("EffectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisallowAutoRepeat")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DischargeAttributeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationAttributeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EffectCategory")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ElectronicChance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FalloffAttributeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IconId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAssistance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOffensive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWarpSafe")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PostExpression")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PreExpression")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RangeAttributeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RangeChance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrackingSpeedAttributeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EffectId");

                    b.ToTable("Effects");
                });

            modelBuilder.Entity("EveMarketEntities.MarketGroup", b =>
                {
                    b.Property<int>("MarketGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Etag")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MarketGroupId");

                    b.ToTable("MarketGroups");
                });

            modelBuilder.Entity("EveMarketEntities.Modifier", b =>
                {
                    b.Property<string>("Func")
                        .HasColumnType("TEXT");

                    b.Property<string>("Domain")
                        .HasColumnType("TEXT");

                    b.Property<int>("ModifiedAttributeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModifyingAttributeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Operator")
                        .HasColumnType("INTEGER");

                    b.Property<int>("effect_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Func");

                    b.ToTable("Modifiers");
                });

            modelBuilder.Entity("EveMarketEntities.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Etag")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("EveMarketEntities.Station", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Etag")
                        .HasColumnType("TEXT");

                    b.Property<float>("MaxDockableShipVolume")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("SystemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StationId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("EveMarketEntities.System", b =>
                {
                    b.Property<int>("SystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConstellationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Etag")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityClass")
                        .HasColumnType("TEXT");

                    b.Property<float>("SecurityStatus")
                        .HasColumnType("REAL");

                    b.HasKey("SystemId");

                    b.ToTable("Systems");
                });

            modelBuilder.Entity("EveMarketEntities.Type", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Capacity")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Etag")
                        .HasColumnType("TEXT");

                    b.Property<int>("GraphicId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IconId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarketGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Mass")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<float>("PackagedVolume")
                        .HasColumnType("REAL");

                    b.Property<int>("PortionSize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Radius")
                        .HasColumnType("REAL");

                    b.Property<float>("Volume")
                        .HasColumnType("REAL");

                    b.HasKey("TypeId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("EveMarketEntities.TypeAttribute", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttributeId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("TypeId", "AttributeId");

                    b.ToTable("TypeAttribute");
                });

            modelBuilder.Entity("EveMarketEntities.TypeEffect", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EffectId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.HasKey("TypeId", "EffectId");

                    b.ToTable("TypeEffect");
                });

            modelBuilder.Entity("EveMarketEntities.TypeAttribute", b =>
                {
                    b.HasOne("EveMarketEntities.Type", null)
                        .WithMany("DogmaAttributes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EveMarketEntities.TypeEffect", b =>
                {
                    b.HasOne("EveMarketEntities.Type", null)
                        .WithMany("DogmaEffects")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
